#pragma enable_d3d11_debug_symbols

// Reset
#pragma kernel ResetTextureKernel
#pragma kernel ResetAgentsKernel

// Step
#pragma kernel MoveAgentsKernel
#pragma kernel WriteTrailsKernel
#pragma kernel DiffuseTextureKernel

// Render
#pragma kernel AgentsDebugKernel
#pragma kernel RenderKernel

Texture2D<float4> readTex;
SamplerState sampler_readTex;

RWTexture2D<float4> writeTex;
RWTexture2D<float4> outTex;
RWTexture2D<float4> debugTex;

struct Agent
{
    float2 position;
    float2 direction;
};

RWStructuredBuffer<Agent> agentsBuffer;

uint rez;
uint stepn;
uint time;
float trailDecayFactor;
int diffusionRange;
int sensorCount;
float sensorRange;
float sensorAngle;
float2 hitXY;
int brushSize;

// ------------------------------------------------------------
// UTIL
// ------------------------------------------------------------

// via "The Art of Code" on YouTube
float2 Random(float2 p) {
    float3 a = frac(p.xyx * float3(123.34, 234.34, 345.65));
    a += dot(a, a + 34.45);
    return frac(float2(a.x * a.y, a.y * a.z));
}

float2 RandomDirection(float2 p) {
    return (normalize(2.0 * (Random(p)- 0.5)));
}

float deg2rad(float angle){
    return angle * 3.14159265359 / 180;
}

float2 RotateAroundPoint(float2 p, float2 pivot, float angle) {
    
    // Convert to radians
    angle = deg2rad(angle);
    
    float s = sin(angle);
    float c = cos(angle);
    
    // translate point back to origin:
    p.x -= pivot.x;
    p.y -= pivot.y;
    
    // rotate point
    float xnew = p.x * c - p.y * s;
    float ynew = p.x * s + p.y * c;
    
    // translate point back:
    p.x = xnew + pivot.x;
    p.y = ynew + pivot.y;
    return p;
}

// ------------------------------------------------------------
// RESET
// ------------------------------------------------------------

[numthreads(1, 1, 1)]
void ResetTextureKernel(uint3 id : SV_DispatchThreadID)
{
    writeTex[id.xy] = 0;
}

[numthreads(64, 1, 1)]
void ResetAgentsKernel(uint3 id : SV_DispatchThreadID)
{
    Agent a;
    
    a.position = Random(id.x * .0001 + time * .001) * rez;
    a.direction = RandomDirection(id.xx * .01 + sin(time));
    
    agentsBuffer[id.x] = a;
}

// ------------------------------------------------------------
// STEP
// ------------------------------------------------------------
[numthreads(64, 1, 1)]
void WriteTrailsKernel(uint3 id : SV_DispatchThreadID)
{
    Agent a = agentsBuffer[id.x];
    writeTex[round(a.position)] = clamp(writeTex[round(a.position)] + .1, 0, 1);
}

// Turn based on surroundings
float2 SensorTurn(uint3 id, Agent a)
{   
    // Array of sensor positions
    float2 sensors[50];
    float angles[50];

    // For debug
    float4 red = float4(1,0,0,1);
    float4 green = float4(0,1,0,1);
    float4 blue = float4(0,0,1,1);
    
    // Position Sensors
    sensors[0] = a.position + a.direction * sensorRange;
    angles[0] = 0;
    for(int i = 1; i < sensorCount; i++){
        if(i % 2.0 == 1.0){
            sensors[i] = RotateAroundPoint(sensors[0], a.position, i * sensorAngle);
            angles[i] = 10; //i * sensorAngle;
        } else {
            sensors[i] = RotateAroundPoint(sensors[0], a.position, -1 * (i - 1) * sensorAngle);
            angles[i] = 10; -1 * (i - 1) * sensorAngle;
        }
    }
    
    // Get Max Value
    float maxVal = 0;
    int bestSensor = 0;
    for(int j = 0; j < sensorCount; j++){
        if(distance(sensors[j], float2(0,0)) != 0){
            float level = readTex.SampleLevel(sampler_readTex, sensors[j] / (float)rez, 0).r;
            if(level > maxVal){
                maxVal = level;
                bestSensor = j;
            }
        }
        //debugTex[sensors[j]] = red;
    }
    
    //debugTex[sensors[bestSensor]] = green;
    
    // Output new direction
    float2 d = RotateAroundPoint(a.direction, float2(0,0), angles[bestSensor]);
    d = normalize(d);
    
    // Return new direction
    return d;
}

[numthreads(64, 1, 1)]
void MoveAgentsKernel(uint3 id : SV_DispatchThreadID)
{
    Agent a = agentsBuffer[id.x];
    
    // Choose next direction
    a.direction = SensorTurn(id, a);
    
    // Move Forward
    a.position = a.position + a.direction;
    
    // Boundaries: Wrap
    if(a.position.x < 0){
        a.position.x = rez - 1;
    }
    if(a.position.y < 0){
        a.position.y = rez - 1;
    }
    a.position % float2(rez, rez);
    
    if(stepn % 2 == 1) {
        agentsBuffer[id.x] = a;
    }
}

[numthreads(1, 1, 1)]
void DiffuseTextureKernel(uint3 id : SV_DispatchThreadID)
{
    float4 oc = readTex[id.xy];
    
    float avg = 0;
    int range = 1;
    int count = 0;
    for (int x = -range; x <= range; x++){
        for (int y = -range; y <= range; y++){
            float2 coord = (id.xy + int2(x,y)) / (float)rez;
            avg += readTex.SampleLevel(sampler_readTex, coord, 0).r;
            count++;
        }
    }
    
    avg /= count;
    
    oc = avg * trailDecayFactor;
    oc = clamp(oc, 0, 1);
    
    if((hitXY.x != 0 && hitXY.y != 0) && distance(hitXY, id.xy) < brushSize) {
        oc += 10;
    }
    
    writeTex[id.xy] = oc;
}

// ------------------------------------------------------------
// RENDER
// ------------------------------------------------------------

[numthreads(1, 1, 1)]
void RenderKernel(uint3 id : SV_DispatchThreadID)
{
    
    if((hitXY.x != 0 && hitXY.y != 0) && distance(hitXY, id.xy) < brushSize) {
        outTex[id.xy] = float4(1, 0, 0, 1);
    } else {
        outTex[id.xy] = readTex[id.xy];
    }
    outTex[id.xy] += debugTex[id.xy];
    debugTex[id.xy] = 0;
}

[numthreads(64, 1, 1)]
void AgentsDebugKernel(uint3 id : SV_DispatchThreadID)
{
    Agent a = agentsBuffer[id.x];
    outTex[round(a.position)] += float4(0, .1, 0, 0);
}